// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"
	"grpc_gateway/ent/car"
	"grpc_gateway/ent/card"
	"grpc_gateway/ent/group"
	"grpc_gateway/ent/schema"
	"grpc_gateway/ent/tenant"
	"grpc_gateway/ent/user"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	carMixin := schema.Car{}.Mixin()
	carMixinFields0 := carMixin[0].Fields()
	_ = carMixinFields0
	carFields := schema.Car{}.Fields()
	_ = carFields
	// carDescCreateTime is the schema descriptor for create_time field.
	carDescCreateTime := carMixinFields0[0].Descriptor()
	// car.DefaultCreateTime holds the default value on creation for the create_time field.
	car.DefaultCreateTime = carDescCreateTime.Default.(func() time.Time)
	// carDescUpdateTime is the schema descriptor for update_time field.
	carDescUpdateTime := carMixinFields0[1].Descriptor()
	// car.DefaultUpdateTime holds the default value on creation for the update_time field.
	car.DefaultUpdateTime = carDescUpdateTime.Default.(func() time.Time)
	// car.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	car.UpdateDefaultUpdateTime = carDescUpdateTime.UpdateDefault.(func() time.Time)
	cardHooks := schema.Card{}.Hooks()
	card.Hooks[0] = cardHooks[0]
	card.Hooks[1] = cardHooks[1]
	card.Hooks[2] = cardHooks[2]
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[0].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	tenantMixin := schema.Tenant{}.Mixin()
	tenant.Policy = privacy.NewPolicies(tenantMixin[0], schema.Tenant{})
	tenant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := tenant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[0].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = tenantDescName.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields1[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[0].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[2].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
	// userDescCurrentAt is the schema descriptor for current_at field.
	userDescCurrentAt := userFields[4].Descriptor()
	// user.DefaultCurrentAt holds the default value on creation for the current_at field.
	user.DefaultCurrentAt = userDescCurrentAt.Default.(func() time.Time)
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[8].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() uuid.UUID)
}

const (
	Version = "v0.9.1"                                          // Version of ent codegen.
	Sum     = "h1:IG8andyeD79GG24U8Q+1Y45hQXj6gY5evSBcva5gtBk=" // Sum of ent codegen.
)
